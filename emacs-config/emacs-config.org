#+STARTUP: indent
#+TITLE: Phil's Emacs Configuration
This configuration integrates with my [[https://github.com/pgroce/emacs-config-framework][configuration framework]], although it could probably be used without it. It also uses some packages from [[https://github.com/pgroce/emacs-pkgs][my own package repository]]. (For the ELPA repo URL, see [[Package configuration]] below.)

* Basic environment

** Debugging

Quick line to print timestamp.

#+BEGIN_SRC emacs-lisp
  (defmacro pg-ts () (format-time-string "MARK: %Y-%m-%dT%T"))
#+END_SRC

** Proxy configuration

Ensure the proxy is configured correctly before we start downloading packages. (The actual proxy file is site-specific, and should be supplied outside the config.)

#+BEGIN_SRC emacs-lisp
  (setq ecfw-proxy-file (expand-file-name "proxies.el" ecfw-config-dir))
  (ecfw-proxy-autoconf)
#+END_SRC

** Package configuration

This configuration makes heavy use of Emacs packages, so first, configure the package system.

=use-package= comes with the almost-equally-useful =bind-key= macro, which is much more user-friendly than manipulating keymaps directly.


#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("melpa"       . "http://melpa.org/packages/")
          ("pgroce"      . "https://pgroce.github.io/emacs-pkgs/elpa/")
  ))


  (require 'package)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-compute-statistics t)
  (setq use-package-verbose t)
#+END_SRC

If we're profiling, additionally compute timing statistics. (TODO: Maybe move this up to the config framework?)

#+BEGIN_SRC emacs-lisp
  (when (getenv "EMACS_CONFIG_PROFILE")
    (setq use-package-compute-statistics t)
    (use-package benchmark-init
      :ensure t
      :config
      (add-hook 'after-init-hook 'benchmark-init/deactivate)))
#+END_SRC

** Foundation packages/libraries

I use these packages in lots of places in the configuration, so load them now.

- =pg-util= :: Utility grab-bag
- =pg-shell-path= :: Manipulation of shell paths (e.g., =/a/b/c:x/y/z=)
- =pg-terminal= :: Special handling for different windowing systems ("terminals" in Emacs parlance)

#+BEGIN_SRC emacs-lisp
  (use-package seq :demand t)
  (use-package dash :demand t :ensure t)
  (use-package s :demand t :ensure t)
  (use-package diminish :demand t :ensure t)
  (use-package pg-util :demand t :ensure t)
  (use-package pg-shell-path :demand t :ensure t)
  (use-package pg-terminal :demand t :ensure t)
#+END_SRC

** Accomodating Emacs customization

Load the output of Emacs' [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][customization]] facility in a sidecar file. I prefer to manually maintain all my configuration, but for some packages it's easier to use =customize= and adapt its output into my config than it is to understand the docs. :/

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "emacs-customize.el" ecfw-config-dir))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** =pg-if-available=

I do several configurations contingent on the presence of certain commands; if the command exists, I tweak something, and if it doesn't, I usually want to mention it to the user.

This macro makes that a little clearer in the several places where I do it.

#+BEGIN_SRC emacs-lisp
  (defmacro pg-if-available (cmd absent-msg &rest exists-forms)
    (declare (indent 1))
    `(if (= 0 (call-process "which" nil nil nil ,cmd))
         (progn
           ,@exists-forms)
       (message "Pro-tip: %s" ,absent-msg)))
#+END_SRC


* General configuration


** Look and feel
<<look-and-feel>>

Use the [[https://github.com/bbatsov/solarized-emacs][Solarized theme]] for shiny.

I like to use a pretty Unicode chevron in the prompt (thanks [[https://starship.rs][starship]]!), but it messes with prompt parsing in the shell. This fixes that.

#+BEGIN_SRC emacs-lisp
  (setq shell-prompt-pattern
        "^[^#$%>❯
  ]*[#$%>❯] *")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init (setq solarized-scale-org-headlines nil
                solarized-use-variable-pitch nil
                solarized-use-more-italic t
                solarized-high-contrast-mode-line nil)
    :config (load-theme 'solarized-dark t))
#+END_SRC


** Decontaminate =super= keybindings (~Macos~ =ns= terminals only)
:PROPERTIES:
:CUSTOM_ID: superpocalypse
:END:


The =ns= Emacs port adds a number of keybindings to =super= in an attempt to make Emacs feel like a NeXTStep/Mac application.

I'd rather use the Emacs style of interaction, because I've learned it already and because I can find better uses for =super=. (Most of these bindings are harmless, but a few, like =s-q= running =save-buffers-kill-emacs=, are infuriating.)

Furthermore, I like to put my own bindings on =super=.

Therefore, kill it all with fire.

Since I'm wrapping this in =pg-terminal-ns=, it will run in =emacs-startup-hook=, so any subsequent rebindings of =super= should do the same. =pg-terminal-any= is a good way to do this generically.

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (pg-terminal-ns
   (unbind-key "M-s-h")
   (unbind-key "s-,")
   (unbind-key "s-'")
   (unbind-key "s-`")
   (unbind-key "s-~")
   (unbind-key "s--")
   (unbind-key "s-:")
   (unbind-key "s-?")
   (unbind-key "s-^")
   (unbind-key "s-&")
   (unbind-key "s-C")
   (unbind-key "s-D")
   (unbind-key "s-E")
   (unbind-key "s-L")
   (unbind-key "s-M")
   (unbind-key "s-S")
   (unbind-key "s-a")
   (unbind-key "s-c")
   (unbind-key "s-d")
   (unbind-key "s-e")
   (unbind-key "s-f")
   (unbind-key "s-g")
   (unbind-key "s-h")
   (unbind-key "s-H")
   (unbind-key "s-j")
   (unbind-key "s-k")
   (unbind-key "s-l")
   (unbind-key "s-m")
   (unbind-key "s-n")
   (unbind-key "s-o")
   (unbind-key "s-p")
   (message "UNBINDING: s-q")
   (unbind-key "s-q")
   (unbind-key "s-s")
   (unbind-key "s-t")
   (unbind-key "s-u")
   (unbind-key "s-v")
   (unbind-key "s-w")
   (unbind-key "s-x")
   (unbind-key "s-y")
   (unbind-key "s-z")
   (unbind-key "s-|")
   (unbind-key "s-<kp-bar>")
   (unbind-key "s-<right>")
   (unbind-key "s-<left>"))
#+END_SRC

***** Disable =C-z=

Same thing, trying to make things Apple-like backfiring. It's way too easy to hit =C-z= and accidentally send the frame to the dock. Unset it.

#+BEGIN_SRC emacs-lisp
  (pg-terminal-ns (unbind-key "C-z"))
#+END_SRC


** Unicode
[[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]] does a lot of magic to ensure that you can see as many Unicode glyphs as possible. You have to download several fonts for it to work; check the page for details.

This package is /slow/ to start and stop if you haven't loaded [[https://github.com/rolandwalker/persistent-soft][persistent-soft]] and [[https://github.com/sigma/pcache][pcache]] libraries.

#+BEGIN_SRC emacs-lisp
  (use-package pcache :ensure t :demand t)
  (use-package persistent-soft :ensure t :demand t)
#+END_SRC

This package is /still/ slow even with those installed. To speed it up, I limit myself to only the following fonts:

- [[https://evertype.com/emono/evermono.zip][Everson Mono]]
- [[https://noto-website-2.storage.googleapis.com/pkgs/NotoSans-unhinted.zip][Noto Sans]]
- [[https://noto-website-2.storage.googleapis.com/pkgs/NotoSansSymbols-unhinted.zip][Noto Sans Symbols]]
- [[https://fontlibrary.org/assets/downloads/symbola/cf81aeb303c13ce765877d31571dc5c7/symbola.zip][Symbola]]
- [[http://quivira-font.com/files/Quivira.otf][Quivira]]
- Inconsolata Nerd Font: Install from [[https://github.com/ryanoasis/nerd-fonts#option-3-install-script][Github]] or =brew install --cask font-inconsolata-nerd-font= (MacOS)
- [[https://www.fontsquirrel.com/fonts/download/dejavu-sans][DejaVu Sans]]
- [[http://mirrors.ctan.org/fonts/Asana-Math.zip][Asana Math]]
- [[https://fontlibrary.org/assets/downloads/babelstone-modern/1fe2f5b6a0c5236fd1b07fc560ad6c1d/babelstone-modern.zip][Babelstone Modern]]
- [[https://fontlibrary.org/assets/downloads/musica/d6fe11732daff6659da9f5db7178826e/musica.zip][Musica]]
- [[https://www.fontspace.com/get/family/07r1][FreeSerif]]
- [[https://cofonts.com/download/itc-zapf-dingbats][Zapf Dingbats]]
- [[https://www.ffonts.net/Lucida-Sans-Unicode.font.zip][Lucida Sans Unicode]]

(Plus the stock MS fonts for Windows use.)

A few of the above fonts may be duplicative; I haven't spent a lot of time deconflicting, the main purpose was to trim the font list and speed up startup/shutdown without losing too much utility for me, so if you need to display non-Roman alphabets more than you need symbols and emoji, this list will not work well for you.

Anyway, time to configure =unicode-fonts=:

#+begin_src emacs-lisp
  (use-package unicode-fonts
    :ensure t
    :config (unicode-fonts-setup)
    :custom (unicode-fonts-block-font-mapping
             '(("Aegean Numbers"
                ("Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold" ))
               ("Alchemical Symbols"
                ("Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold"))
               ("Alphabetic Presentation Forms"
                ("DejaVu Sans:width=condensed" "Arial Unicode MS" "Cardo" "Code2000" "Quivira" "Everson Mono:weight=bold"))
               ("Ancient Greek Musical Notation"
                ("Noto Sans Symbols"   "Symbola" "Quivira" "Everson Mono:weight=bold"))
               ("Ancient Greek Numbers"
                ("Noto Sans Symbols" "Apple Symbols" "Quivira" "Symbola" "Everson Mono:weight=bold" ))
               ("Ancient Symbols"
                ("Noto Sans Symbols" "Analecta"  "Quivira" "Symbola" "Everson Mono:weight=bold" ))
               ("Arabic"
                ("Courier New"           "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Arial Unicode MS" "Tahoma" "Microsoft Sans Serif"))
               ("Arabic Presentation Forms-A"
                (  "Arial Unicode MS" "Microsoft Sans Serif" "Tahoma"        "DejaVu Sans Mono" "DejaVu Sans:width=condensed"  ))
               ("Arabic Presentation Forms-B"
                ("DejaVu Sans Mono"      "Arial Unicode MS" "Microsoft Sans Serif"  "DejaVu Sans:width=condensed"   ))
               ("Arabic Supplement"
                ("Courier New"            "Tahoma" "Microsoft Sans Serif" ))
               ("Armenian"
                ("DejaVu Sans Mono"    "DejaVu Sans:width=condensed" "Quivira"   "Arial Unicode MS" "Everson Mono:weight=bold" ))
               ("Arrows"
                ("DejaVu Sans Mono" "Apple Symbols" "Cambria Math" "Segoe UI Symbol" "DejaVu Sans:width=condensed" "Asana Math" "Arial Unicode MS" "BabelStone Modern" "Symbola" "Quivira"  "Noto Sans Symbols" "Everson Mono:weight=bold" ))
               ("Bengali"
                ("Arial Unicode MS"))
               ("Block Elements"
                ("DejaVu Sans Mono" "Noto Sans Symbols"  "DejaVu Sans:width=condensed" "Apple Symbols" "Segoe UI Symbol" "BabelStone Modern" "Symbola" "Quivira"  "Everson Mono:weight=bold"))
               ("Bopomofo"
                (              "Arial Unicode MS"   ))
               ("Box Drawing"
                ("DejaVu Sans Mono"  "DejaVu Sans" "Everson Mono" "Quivira"  "Noto Sans Symbols" "Segoe UI Symbol" "Symbola"))
               ("Braille Patterns"
                ("Quivira" "Apple Braille" "DejaVu Sans:width=condensed" "Apple Symbols" "Segoe UI Symbol" "Symbola" "Noto Sans Symbols"   "Everson Mono:weight=bold"))
               ("Buhid"
                ( "Quivira" ))
               ("Byzantine Musical Symbols"
                ("Noto Sans Symbols" "Musica" "Symbola" "FreeSerif"))
               ("Carian"
                (   "Quivira" "Everson Mono:weight=bold" ))
               ("Cherokee"
                ( "Quivira" "Everson Mono:weight=bold"  ))
               ("Cherokee Supplement"
                ("Everson Mono:weight=bold"))
               ("CJK Compatibility"
                ( "Arial Unicode MS" ))
               ("CJK Compatibility Forms"
                ( "Symbola" ))
               ("CJK Compatibility Ideographs"
                ( "Arial Unicode MS" ))
               ("CJK Radicals Supplement"
                ( "Apple Symbols" ))
               ("CJK Symbols and Punctuation"
                ( "Arial Unicode MS" ))
               ("CJK Unified Ideographs"
                ( "Apple LiGothic" "Arial Unicode MS" ))
               ("Combining Diacritical Marks"
                ("Monaco" "Consolas" "Noto Sans" "Cambria Math"   "Courier New" "DejaVu Sans:width=condensed" "DejaVu Sans Mono"     "Tahoma" "Microsoft Sans Serif" "Arial" "Quivira" "Symbola" "Everson Mono"  "Arial Unicode MS" ))
               ("Combining Diacritical Marks Supplement"
                ( "FreeSerif"   "DejaVu Sans:width=condensed" "Noto Sans" "Segoe UI"  "Everson Mono" ))
               ("Combining Diacritical Marks for Symbols"
                ("Cambria Math" "Segoe UI Symbol" "Noto Sans Symbols" "Symbola"  "Everson Mono" "Arial Unicode MS"))
               ("Combining Half Marks"
                ("Consolas" "DejaVu Sans:width=condensed" "Everson Mono:weight=bold" "Symbola"))

               ("Control Pictures"
                ("Apple Symbols" "BabelStone Modern" "Noto Sans Symbols" "Segoe UI Symbol" "Arial Unicode MS" "Symbola" "Quivira"   "Everson Mono:weight=bold"))
               ("Coptic"
                (    "Segoe UI Symbol" "Quivira"    "Everson Mono:weight=bold" ))
               ("Coptic Epact Numbers"
                ( "Symbola"))
               ("Counting Rod Numerals"
                ( "Noto Sans Symbols" "BabelStone Modern" "Symbola" "Quivira" "Apple Symbols" ))
               ("Currency Symbols"
                ("Monaco" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Consolas" "Noto Sans Symbols" "Noto Sans" "Segoe UI" "Apple Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold" ))
               ("Cypriot Syllabary"
                ( "Everson Mono:weight=bold" ))
               ("Cyrillic"
                ("Consolas" "Monaco" "DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Noto Sans" "Courier New" "Calibri" "Microsoft Sans Serif"  "Arial Unicode MS"   "Symbola" "Quivira" "Everson Mono:weight=bold"))
               ("Cyrillic Extended-A"
                ("Quivira" "Everson Mono:weight=bold" "FreeSerif" ))
               ("Cyrillic Extended-B"
                ("Quivira"  "Everson Mono:weight=bold"))
               ("Cyrillic Supplement"
                ("Consolas" "Courier New" "Calibri" "Noto Sans" "DejaVu Sans:width=condensed"   "Symbola" "Quivira"  "Everson Mono:weight=bold"))
               ("Deseret"
                ( "Apple Symbols" "Segoe UI Symbol"   "Everson Mono:weight=bold"))
               ("Devanagari"
                (           "Arial Unicode MS" ))
               ("Devanagari Extended"
                (  "FreeSerif"))
               ("Dingbats"
                ("Apple Color Emoji" "DejaVu Sans Mono" "Segoe UI Symbol" "Zapf Dingbats" "DejaVu Sans:width=condensed" "Arial Unicode MS"  "Noto Sans Symbols" "Symbola" "Quivira" "Everson Mono:weight=bold"))
               ("Domino Tiles"
                ("DejaVu Sans:width=condensed" "Symbola" "Quivira" "Segoe UI Symbol" "Noto Sans Symbols"  "Everson Mono:weight=bold"))
               ("Elbasan"
                ("Everson Mono:weight=bold"))
               ("Emoticons"
                ("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Quivira"))
               ("Enclosed Alphanumeric Supplement"
                ("Segoe UI Symbol" "Noto Sans Symbols" "Symbola" "Quivira"  "BabelStone Modern"))
               ("Enclosed Alphanumerics"
                ("Noto Sans Symbols" "Segoe UI Symbol" "Arial
               Unicode MS" "Symbola" "Quivira" "BabelStone
               Modern" "Everson Mono:weight=bold"))
               ("Enclosed CJK Letters and Months"
                ( "Arial Unicode MS" "Quivira" ))
               ("Enclosed Ideographic Supplement"
                ("Segoe UI Symbol" "Noto Sans Symbols" "Symbola"))
               ("General Punctuation"
                ("Monaco" "Apple Symbols" "Segoe UI Symbol" "Cambria
               Math" "DejaVu Sans Mono" "DejaVu
               Sans:width=condensed" "Symbola" "Quivira" "Noto
               Sans" "Everson Mono:weight=bold" "BabelStone
               Modern"))
               ("Geometric Shapes"
                ("DejaVu Sans Mono" "DejaVu
               Sans:width=condensed" "Segoe UI Symbol" "Arial
               Unicode MS" "Symbola" "Noto Sans
               Symbols" "Quivira" "BabelStone Modern" "Everson
               Mono" ))
               ("Geometric Shapes Extended"
                ("Symbola" "Quivira"))
               ("Georgian"
                ("DejaVu Sans Mono" "Noto Sans Georgian" "Noto Serif
               Georgian" "DejaVu Sans:width=condensed" "Arial
               Unicode MS" "Quivira" "Everson Mono:weight=bold"))
               ("Georgian Supplement"
                ("Noto Sans Georgian" "Noto Serif Georgian" "DejaVu Serif:width=condensed"
                 "Quivira" "Everson Mono:weight=bold"))
               ("Glagolitic"
                ("Segoe UI Symbol" "Quivira" "FreeSerif"))
               ("Gothic"
                ("Segoe UI Symbol" "FreeSerif" "Quivira"
                 "Everson Mono:weight=bold"))
               ("Greek Extended"
                ("Consolas" "DejaVu Sans Mono" "Courier New"  "Noto Sans"
                 "DejaVu Sans:width=condensed" "Microsoft Sans Serif"
                 "Arial Unicode MS" "Arial" "Tahoma" "Quivira"
                 "Everson Mono:weight=bold"  ))
               ("Greek and Coptic"
                ("Consolas" "DejaVu Sans Mono" "DejaVu Sans:width=condensed"
                 "Noto Sans" "Segoe UI Symbol" "Calibri" "Microsoft Sans Serif"
                 "Lucida Console" "Arial Unicode MS" "Symbola" "Quivira"
                 "Everson Mono:weight=bold"  ))
               ("Gujarati"
                ("Arial Unicode MS"))
               ("Gurmukhi"
                ("Arial Unicode MS" ))
               ("Halfwidth and Fullwidth Forms"
                ( "Arial Unicode MS"      "Apple Symbols" "Quivira"  ))
               ("Hangul Compatibility Jamo"
                ("AppleMyungjo" "Arial Unicode MS"))
               ("Hangul Jamo"
                ("Arial Unicode MS" ))
               ("Hangul Syllables"
                ("AppleGothic" "Arial Unicode MS" ))
               ("Hanunoo"
                ("Noto Sans Hanunoo" "Quivira" "FreeSerif"))
               ("Hebrew"
                ("Courier New" "Microsoft Sans Serif" "Tahoma" "Lucida Sans Unicode"
                 "Arial Unicode MS" "Arial" "Quivira" "Everson Mono:weight=bold" ))
               ("Hiragana"
                ("MS Gothic" "MS Mincho"  "Arial Unicode MS"))
               ("Ideographic Description Characters"
                ("AppleMyungjo" "Quivira"))
               ("Imperial Aramaic"
                ("Quivira" "Everson Mono:weight=bold"))
               ("IPA Extensions"
                ("Monaco" "Consolas" "DejaVu Sans Mono" "Courier New" "Noto Sans"
                 "Arial Unicode MS" "Arial" "Tahoma" "Microsoft Sans Serif"
                 "Symbola" "Quivira" "Everson Mono:weight=bold"))
               ("Kanbun"
                ("Arial Unicode MS"))
               ("Kangxi Radicals"
                ("AppleMyungjo" "Apple Symbols" ))
               ("Kannada"
                ("Arial Unicode MS" ))
               ("Katakana"
                ("MS Gothic" "Arial Unicode MS"))
               ("Katakana Phonetic Extensions"
                ("MS Gothic"))
               ("Lao"
                ("DejaVu Sans Mono" "Arial Unicode MS"
                 "DejaVu Sans:width=condensed"))
               ("Latin Extended-C"
                ("DejaVu Sans Mono" "DejaVu Sans:width=condensed" "Noto Sans"
                 "Cambria Math" "Quivira" "Everson Mono:weight=bold"))
               ("Latin Extended-D"
                ("DejaVu Sans Mono" "DejaVu Sans:width=condensed"
                 "Quivira" "Everson Mono:weight=bold" ))
               ("Latin Extended-E"
                ("Quivira" "Everson Mono:weight=bold" ))
               ("Letterlike Symbols"
                ("Monaco" "Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols"
                 "Cambria Math" "DejaVu Sans:width=condensed" "Arial Unicode MS"
                 "Symbola" "Quivira"  "Everson Mono:weight=bold"))
               ("Linear B Ideograms"
                ("Everson Mono:weight=bold"))
               ("Linear B Syllabary"
                ("Everson Mono:weight=bold"))
               ("Lisu"
                ("Quivira" "Everson Mono:weight=bold"))
               ("Lycian"
                ("Quivira" "Everson Mono:weight=bold" ))
               ("Lydian"
                ("Quivira" "Everson Mono:weight=bold" ))
               ("Mahjong Tiles"
                ("Segoe UI Symbol" "Symbola" "Noto Sans Symbols" "Quivira" "Everson Mono"))
               ("Malayalam"
                (       "Arial Unicode MS"))
               ("Mathematical Alphanumeric Symbols"
                ("Cambria Math" "Noto Sans Symbols" "Asana Math"  "Symbola"
                 "Quivira" "Everson Mono:weight=bold"))
               ("Mathematical Operators"
                ("Monaco" "DejaVu Sans Mono" "Segoe UI Symbol" "Cambria Math"
                 "DejaVu Sans:width=condensed" "Noto Sans Symbols" "Apple Symbols"
                 "Asana Math" "Arial Unicode MS" "Symbola" "Quivira"
                 "Everson Mono:weight=bold" ))
               ("Meroitic Cursive"
                (  "Segoe UI Symbol"))

               ("Miscellaneous Mathematical Symbols-A"
                ("Noto Sans Symbols" "Apple Symbols" "Segoe UI Symbol" "Asana Math"
                 "Symbola" "Quivira" "Cambria Math" "Everson Mono:weight=bold"))
               ("Miscellaneous Mathematical Symbols-B"
                ("Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols"
                 "Cambria Math" "Asana Math"  "Symbola" "Quivira"))
               ("Miscellaneous Symbols"
                ("Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols"
                 "DejaVu Sans Mono" "DejaVu Sans:width=condensed"
                 "Arial Unicode MS" "Symbola" "Quivira" "MS Reference Sans Serif"
                 "Everson Mono:weight=bold"))
               ("Miscellaneous Symbols and Arrows"
                ("Symbola" "Quivira" "Asana Math"  "Segoe UI Symbol"
                 "Noto Sans Symbols"))
               ("Miscellaneous Symbols and Pictographs"
                ("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Quivira"))
               ("Miscellaneous Technical"
                ("Segoe UI Symbol" "Noto Sans Symbols" "Apple Symbols"
                 "Cambria Math" "DejaVu Sans Mono" "Symbola" "Quivira"
                 "Everson Mono:weight=bold"))
               ("Modifier Tone Letters"
                ("Apple Symbols" "Noto Sans Symbols"   "Quivira"   "DejaVu Sans Mono"))
               ("Musical Symbols"
                ("Noto Sans Symbols" "Musica" "FreeSerif" "Symbola" "Quivira"))
               ("Nabataean" ("Everson Mono:weight=bold"))
               ("NKo"
                ("DejaVu Sans:width=condensed"))
               ("Number Forms"
                ("DejaVu Sans:width=condensed" "Asana Math" "Arial Unicode MS"
                 "Symbola" "Quivira" "Everson Mono:weight=bold"  ))
               ("Ogham"
                ("Segoe UI Symbol" "DejaVu Sans:width=condensed" "BabelStone Modern"
                 "Quivira" "Everson Mono:weight=bold"))
               ("Old Italic"
                ("Segoe UI Symbol" "DejaVu Sans:width=condensed"
                 "Noto Sans Old Italic" "Quivira" "Everson Mono:weight=bold"))
               ("Old Permic" ("Everson Mono:weight=bold"))
               ("Old Persian" ( "FreeSans" ))
               ("Old South Arabian"
                (  "Quivira"  "Everson Mono:weight=bold"))
               ("Old Turkic"
                ("Segoe UI Symbol" "Quivira" "Everson Mono:weight=bold"))
               ("Optical Character Recognition"
                ("Apple Symbols" "Segoe UI Symbol" "Noto Sans Symbols"
                 "Arial Unicode MS" "Symbola" "Quivira"  "BabelStone Modern"
                 "Everson Mono"))
               ("Oriya" ( "Arial Unicode MS"))
               ("Ornamental Dingbats" ("Symbola"))
               ("Osmanya" ( "Everson Mono:weight=bold"))
               ("Phaistos Disc"
                ( "Noto Sans Symbols" "Symbola" "Everson Mono:weight=bold"  ))
               ("Phoenician"
                (   "Quivira"  "Everson Mono:weight=bold" ))
               ("Phonetic Extensions"
                ("Monaco" "Consolas" "Calibri" "Noto Sans" "Quivira" "Courier New"
                 "DejaVu Sans:width=condensed"  "Everson Mono:weight=bold" ))
               ("Phonetic Extensions Supplement"
                ("Consolas" "Calibri" "Courier New" "Noto Sans" "Quivira"
                 "DejaVu Sans Mono" "DejaVu Sans:width=condensed"
                 "Everson Mono:weight=bold" ))
               ("Playing Cards"
                ("DejaVu Sans:width=condensed" "Symbola" "Noto Sans Symbols"
                 "Segoe UI Symbol" "Quivira"))
               ("Rejang"
                ( "Everson Mono:weight=bold"))
               ("Runic"
                ("Segoe UI Symbol" "Quivira" "Everson Mono:weight=bold"))
               ("Samaritan"
                ( "Quivira" "Everson Mono:weight=bold"))
               ("Shavian"
                (    "Apple Symbols"  "Everson Mono:weight=bold"))
               ("Small Form Variants"
                ("Apple Symbols" "Arial Unicode MS"    ))
               ("Specials"
                ("BabelStone Modern" "Noto Sans Symbols" "Apple Symbols"
                 "Arial Unicode MS" "Symbola" "DejaVu Sans Mono"
                 "DejaVu Sans:width=condensed" "Quivira"  ))

               ("Superscripts and Subscripts"
                ("Consolas" "Monaco" "Apple Symbols" "Cambria Math"
                 "DejaVu Sans Mono" "DejaVu Sans:width=condensed"
                 "Segoe UI Symbol" "Asana Math" "Symbola" "Quivira"
                 "Everson Mono:weight=bold" ))
               ("Supplemental Arrows-A"
                ("Segoe UI Symbol" "Cambria Math" "DejaVu Sans:width=condensed"
                 "Asana Math" "Quivira" "Symbola" "Apple Symbols"
                 "Noto Sans Symbols" "Everson Mono:weight=bold"
                 "BabelStone Modern"))
               ("Supplemental Arrows-B"
                ("Cambria Math" "Segoe UI Symbol" "Apple Symbols"
                 "Noto Sans Symbols" "Asana Math" "Quivira" "Symbola"
                 "Everson Mono:weight=bold"))
               ("Supplemental Arrows-C" ("Symbola"))
               ("Supplemental Mathematical Operators"
                ("Cambria Math" "Segoe UI Symbol" "Noto Sans Symbols"
                 "Apple Symbols" "Asana Math"  "Symbola" "Quivira"
                 "Everson Mono:weight=bold"))
               ("Supplemental Punctuation"
                ("DejaVu Sans Mono" "Segoe UI Symbol" "Noto Sans Symbols"
                 "Symbola" "Quivira" "Everson Mono:weight=bold"  ))
               ("Supplemental Symbols and Pictographs"
                ("Symbola"))
               ("Tagalog" ("Quivira"))
               ("Tagbanwa" ("Quivira"))
               ("Tags" ("BabelStone Modern" ))
               ("Tai Le" ("FreeSerif"))
               ("Tai Xuan Jing Symbols"
                ( "Apple Symbols" "Noto Sans Symbols" "Segoe UI Symbol"
                  "DejaVu Sans:width=condensed" "Symbola" "Quivira"
                  "BabelStone Modern"  "Everson Mono:weight=bold"))
               ("Tamil" ("Arial Unicode MS"))
               ("Telugu" ("Arial Unicode MS"))
               ("Thaana" ("Everson Mono:weight=bold"))
               ("Thai"
                ("Tahoma" "Arial Unicode MS" "Quivira" "Everson Mono:weight=bold"))
               ("Tibetan" ("Arial Unicode MS"))
               ("Tifinagh"
                ("DejaVu Sans:width=condensed"  "Quivira" "Everson Mono:weight=bold"))
               ("Transport and Map Symbols"
                ("Apple Color Emoji" "Segoe UI Symbol" "Symbola"))
               ("Ugaritic"
                ("Quivira" "Everson Mono:weight=bold" "FreeSans"))
               ("Unified Canadian Aboriginal Syllabics"
                ("Quivira" "Everson Mono:weight=bold"))
               ("Unified Canadian Aboriginal Syllabics Extended"
                ("Quivira" "Everson Mono:weight=bold"))
               ("Vai" ("Quivira"))
               ("Variation Selectors" ("BabelStone Modern"  ))
               ("Variation Selectors Supplement" ("BabelStone Modern" ))
               ("Vertical Forms" ("Symbola"))
               ("Yijing Hexagram Symbols"
                ( "Noto Sans Symbols" "Segoe UI Symbol" "Apple Symbols"
                  "DejaVu Sans:width=condensed"  "Symbola" "Quivira"
                  "BabelStone Modern"  "Everson Mono:weight=bold")))))


#+end_src


** URLs

Make it easier to call =browse-url-at-point=

#+BEGIN_SRC emacs-lisp
  (pg-terminal-any (bind-key "s-b" #'browse-url-at-point))
#+END_SRC

** Buffers

*** Unique buffer names

=uniquify= ensures that buffer names are unique, but not ridiculously long. Handy if you're editing the same file in two different source trees, for instance.

#+begin_src emacs-lisp
  (use-package uniquify
    :init
    (progn
      (setq uniquify-buffer-name-style 'forward)
      (setq uniquify-separator "/")
      (setq uniquify-after-kill-buffer-p t)
      (setq uniquify-ignore-buffers-re "^\\*")))
#+end_src

*** Burying buffers

Bury buffers easily.

#+begin_src emacs-lisp
  (pg-terminal-any (bind-key "s-q" #'bury-buffer))
#+end_src

Bury buffers and delete the window they're in. Default behavior from some transient-window-generating modes, but not others. And sometimes you're just done with a window split, darn it.

#+BEGIN_SRC emacs-lisp
  (defun pg-bury-buffer-delete-window ()
    (interactive)
    (bury-buffer)
    (delete-window))

  (ecfw-defer
   (pg-terminal-any (bind-key "s-Q" #'pg-bury-buffer-delete-window)))
#+END_SRC


** Directories (=dired=)

Lots of tweaks to =dired=:

   * Also load =wdired=.
   * Make =M-<= and =M->= do the right thing. (h/t [[http://whattheemacsd.com//setup-dired.el-02.html][What the emacs.d!?]])
   * =z= gets the size of marked files via =du=. (h/t [[http://oremacs.com/2015/01/12/dired-file-size/][(or emacs irrelevant)]])
   * =H= swaps between full and human-readable file sizes.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :defer t
    :config
    (progn
      (defun dired-back-to-top ()
        (interactive)
        (beginning-of-buffer)
        (dired-next-line 4))
      (define-key dired-mode-map
        (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)

      (defun dired-jump-to-bottom ()
        (interactive)
        (end-of-buffer)
        (dired-next-line -1))
      (define-key dired-mode-map
        (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)

      (defun dired-get-size ()
        (interactive)
        (let ((files (dired-get-marked-files)))
          (with-temp-buffer
            (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
            (message
             "Size of all marked files: %s"
             (progn
               (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
               (match-string 1))))))
      (bind-key "Z" #'dired-get-size dired-mode-map)


      (defun dired-toggle-show-human-sizes (&optional arg)
        (interactive)
        (when (not (local-variable-p 'dired-listing-switches))
          (make-local-variable 'dired-listing-switches)
          (setq-local dired-old-listing-switches dired-listing-switches))
        (if (or arg
                (equal dired-listing-switches dired-old-listing-switches))
            (setq dired-listing-switches
                  (concat dired-old-listing-switches "h"))
          (setq dired-listing-switches dired-old-listing-switches))
        (dired-sort-other dired-listing-switches))
      (add-hook 'dired-mode-hook 'dired-toggle-show-human-sizes)
      (bind-key "H" #'dired-toggle-show-human-sizes dired-mode-map)))

  (progn
    ;; Load dired accessory packages
    (use-package wdired
      :after (dired)
      :init
      (progn
        (setq wdired-allow-to-change-permissions t
              wdired-allow-to-redirect-links t
              wdired-use-interactive-rename t
              wdired-confirm-overwrite t))))
#+END_SRC

No one needs the default list-directory, make it dired instead.

#+begin_src emacs-lisp
  (bind-key "C-x C-d" 'dired)
#+end_src

** Opening files

I wrote a small library for opening files with the OS-registered viewer, relying on the OS-level facility in MacOS (=open=), Windows (=explorer=), and \*nix (varies, but I'm assuming =xdg-open=). I added some =dired= support as well, since opening a file seems like a natural thing to do there, so we load this after =dired=.

#+begin_src emacs-lisp
  (use-package pg-open
    :ensure t
    :bind (("C-c <S-backspace>" . pg-open-dir)
           ("C-c <backspace>" . pg-open-file)
           :map dired-mode-map
           ("S-<return>" . pg-open-file-dired)))
#+end_src



** Remote editing (=tramp=)

This bit of voodoo allows me to edit files on remote machines as =root=. I'm also modifying =tramp-shell-prompt-pattern= to accommodate starship, as done above in [[look-and-feel][Look and Feel]].

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :after (helm)
    :custom
    (
     ;; remote root voodoo
     (tramp-default-method "ssh")
     (tramp-default-proxies-alist
      '(((regexp-quote (system-name)) nil nil)
        (nil "\\`root\\'" "/ssh:%h:")))
     ;; customize tramp prompt
     (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>❯
  ]*#?[]#$%>❯] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")
     ))
#+END_SRC




** Narrowing (=helm=)

[[https://github.com/emacs-helm/helm][Helm]] is a cross-cutting concern. This is the core setup; elsewhere in the config, other packages will customize Helm to their needs.

#+BEGIN_SRC emacs-lisp

  (use-package helm
    :diminish helm-mode
    :ensure t
    :demand t
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("C-h a" . helm-apropos)

           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("C-i"   . helm-execute-persistent-action)
           ("C-z"   . helm-select-action)
           )
    :config
    (helm-mode 1))

  (use-package helm-swoop
    :ensure t
    :after (helm)
    :bind ("M-1" . helm-swoop))

  (use-package helm-descbinds
    :ensure t
    :after (helm)
    :bind ("C-h b" . helm-descbinds))

  (use-package helm-ag
    :ensure t
    :after (helm ag))
#+END_SRC


** Printing

Some very basic printing defaults.

#+begin_src emacs-lisp
(setq ps-print-color-p 'black-white)
(setq-default ps-default-fg "black")
(setq-default ps-default-bg "white")
#+end_src


** Pop-up windows

Manage some temporary buffers using pop-up windows.

At some point I should probably make it possible to manage =popper-reference-buffers= in per-package configuration, so new packages can register buffers they create as transient like this. For now, this works.

#+begin_src emacs-lisp
  (use-package popper
    :ensure t                             ; or :straight t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))

    :custom
    ((popper-reference-buffers
      '("\\*Messages\\*"
        "Output\\*$"
        "\\*Async Shell Command\\*"
        help-mode
        compilation-mode
        inferior-python-mode
        inferior-emacs-lisp-mode
        "^\\*eshell.*\\*$" eshell-mode
        "^\\*shell.*\\*$"  shell-mode
        "^\\*term.*\\*$"   term-mode
        "^\\*vterm.*\\*$"  vterm-mode))
     (popper-window-height
      (lambda (win)
        (fit-window-to-buffer
         win
         (floor (frame-height) 6)
         (floor (frame-height) 3)))))
    :init
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src



** Small things


*** =expand-region=

[[https://github.com/magnars/expand-region.el][expand-region]] expands the existing selection to the next largest semantic unit (character, word, sentence, paragraph; character, word, string, function; etc.) It is useful magic.

I have it bound to =M-2= as part of an ergonomic trifecta of keys: =M-1= is bound to =helm-swoop= and =M-3= is bound to =mc/mark-all-dwim=, so I can select things quickly with =M-2= and quickly either search for them or operate on all instance of them in a file.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("M-2" . er/expand-region))
#+END_SRC

*** Kaomoji
The most important part of my configuration file. :) There's probably a way to do this with abbreviations or (gag) YASnippet, but this works and doesn't require much research.

#+BEGIN_SRC emacs-lisp
  (defmacro pg/make-insert-command (cmd-name to-insert)
    `(defun ,cmd-name () (interactive) (insert ,to-insert)))
#+END_SRC

**** =shrug=/=welp=

I guess the canonical name for this is =shrug=.

#+BEGIN_SRC emacs-lisp
  (defun welp ()
    "Insert complicated but hugely important string into buffer."
    (interactive)
    (insert "¯\\_(ツ)_/¯"))
  (defalias 'shrug 'welp)
#+END_SRC

**** =table-flip=

#+BEGIN_SRC emacs-lisp
  (defun table-flip ()
      "Insert complicated but hugely important string into buffer."
      (interactive)
      (insert "(╯°□°）╯︵ ┻━┻"))
#+END_SRC

**** =eyes=

#+BEGIN_SRC emacs-lisp
  (defun eyes ()
      "Insert complicated but hugely important string into buffer."
      (interactive)
      (insert "👀"))
#+END_SRC


*** One(ish)-liners

Put all backups in one place.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+end_src

Inhibit splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Never insert tabs.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Delete trailing white space.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Substitute "yes/no" prompts with "y/n" prompts.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Yes, I know it's a large file. Open it anyway.

#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src

=narrow-to-region= is disabled by default, because the behavior is potentially scary to new users. I use it enough for that to be worth changing.

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src

When I run =man=, use the frame I'm in when I run it, so I can scroll and whatnot.

#+BEGIN_SRC emacs-lisp
  (setq Man-notify-method 'pushy)
#+END_SRC

Enable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]].

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

Make =split-sensibly= split, er, more sensibly

#+BEGIN_SRC emacs-lisp
  ;;; Original value: 80
  (setq split-height-threshold nil)
#+END_SRC

Disable version control on tramp, to speed it up

#+BEGIN_SRC emacs-lisp
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))
#+END_SRC

Save command history and some other variables.

#+BEGIN_SRC emacs-lisp
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (savehist-mode 1)
#+END_SRC



* General terminal configurations

Emacs extends the notion of the terminal (like xterm or VT-220 terminals) to include the GUI versions that run on GTK, Windows, OS X, etc.

=pg-terminal-config= provides macros we use later to conditionally execute code for different terminals.

#+BEGIN_SRC emacs-lisp
  (use-package pg-terminal :ensure t)
#+END_SRC

Configuration of each terminal is done in [[Customizing platforms]], below.

** GUI Customizations


*** Clean frames

Customize the GUI frame look and feel the way I want it.

#+begin_src emacs-lisp
  (defun pg-clean-frames ()
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (transient-mark-mode -1)
    (setq inhibit-splash-screen t)
    (show-paren-mode 1)
    (column-number-mode)

    (pg-util-alist-update-var 'window-system-default-frame-alist
                              '((nil (menu-bar-lines . 0)
                                     (tool-bar-lines . 0)))))
#+end_src

*** Navigation

I always bind =super= to the right alt key, so these keybinds are pretty effective ways to quickly travel between windows and frames. Basically just hold down right-alt and move up and down to go between windows, and left and right to go between frames.

(Note that I don't have to protect these bindings from the [[#superpocalypse][superpocalypse]] because they're called by the terminal config itself, which can sequence things appropriately.)

#+begin_src emacs-lisp
  (defun pg-prev-frame () (interactive) (other-frame 1))
  (defun pg-next-frame () (interactive) (other-frame -1))

  (defun pg-navigate-frames ()
    (bind-key "<s-right>" 'pg-next-frame)
    (bind-key "<s-left>" 'pg-prev-frame))

  (defun pg-prev-window () (interactive) (other-window -1))
  (defun pg-next-window () (interactive) (other-window 1))

  (defun pg-navigate-windows ()
    (bind-key "<s-up>" 'pg-prev-window)
    (bind-key "<s-down>" 'pg-next-window))
#+end_src





** Plain ol' terminal

These changes apply to every terminal-based Emacs I care about.

#+BEGIN_SRC emacs-lisp
  (pg-terminal-t
   (pg-clean-frames)
   (pg-navigate-frames)
   (pg-navigate-windows))
#+END_SRC


* Customizing workflows

** Text processing

*** General customizations for text buffers

Turn on spellcheck and visual line wrap in all text buffers. This should work for all modes derived from =text-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :demand t
    :diminish " ƒ"
    :hook (text-mode . flyspell-mode))
  (use-package simple
    :diminish (visual-line-mode . " ↩")
    :hook (text-mode . visual-line-mode))
#+END_SRC

Associate some modes with some file name regexes.

#+BEGIN_SRC emacs-lisp
  (use-package rst-mode :mode "\\.rst\\'")
  (use-package nxml-mode :mode "\\.xml\\'")
  (use-package sgml-mode :mode "\\.html\\'")
  (use-package json-mode :ensure t :mode "\\.json\\'")
  (use-package markdown-mode :ensure t :mode "\\.md\\'")
#+END_SRC

[[https://github.com/aki237/zen-mode][zen-mode]] sets Emacs up as a distraction-free editor. This can be pretty nice for buckling down and getting a document out the door.

#+begin_src emacs-lisp
  (use-package zen-mode :ensure t :commands (zen-mode))
#+end_src

*** Filling and unfilling paragraphs

I had some semi-DIY code that did this for the longest time, but someone read [[http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html][the same thing I did]] and wrote an [[https://github.com/purcell/unfill][actual MELPA package]] for it, so now I just use that.

#+begin_src emacs-lisp
  (use-package unfill
    :ensure t
    :bind ([remap fill-paragraph] . unfill-toggle))
#+end_src

*** Upcasing, downcasing, and capitalizing words

The =upcase-word=, =downcase-word=, and =capitalize-word= functions are quite handy. Sometimes, though, you are at the end of the word you want to change. For that, these functions exist.

The forward versions of these functions advance point to the end of the word when doing their transformation. That's optional in these functions; I just found that, more often than not, I didn't want that behavior when going in reverse.

#+begin_src emacs-lisp
  (defun pg-upcase-word-reverse (&optional arg)
    (interactive)
    (upcase-word -1)
    (when (not (equal arg nil))
      (backward-word)))

  (defun pg-downcase-word-reverse (&optional arg)
    (interactive)
    (downcase-word -1)
    (when (not (equal arg nil))
      (backward-word)))

  (defun pg-capitalize-word-reverse (&optional arg)
    (interactive)
    (capitalize-word -1)
    (when (not (equal arg nil))
      (backward-word)))

  (bind-key "M-U" 'pg-upcase-word-reverse)
  (bind-key "M-L" 'pg-downcase-word-reverse)
  (bind-key "M-C" 'pg-capitalize-word-reverse)

  (pg-terminal-any (bind-key "s-u" (lambda () (interactive) (pg-upcase-word-reverse 1))))
  (pg-terminal-any (bind-key "s-l" (lambda () (interactive) (pg-downcase-word-reverse 1))))
  (pg-terminal-any (bind-key "s-c" (lambda () (interactive) (pg-capitalize-word-reverse 1))))
#+end_src

*** Replacing "smart" Microsoft characters with normal characters

This comes up when interoperating with Microsoft products. Translate various character codes that mean things in the Microsoft Extended Universe into their IRL counterparts.

#+begin_src emacs-lisp
  (defcustom pg-smart-to-ascii '(
                              ("\x201C" . "\"")
                              ("\x201D" . "\"")

                              ("\x93" . "\"")
                              ("\x94" . "\"")

                              ("\x2018" . "'")
                              ("\x2019" . "'")
                              ("\x92" . "'")

                              ;; en-dash
                              ("\x2013" . "-")
                              ;; em-dash
                              ("\x2014" . "–"))
    ""
    :type '(repeat (cons (string :tag "Smart Character  ")
                         (string :tag "Ascii Replacement"))))

  (defun pg-replace-smart-to-ascii (beg end)
    (interactive "r")
    (format-replace-strings smart-to-ascii
                            nil beg end))
#+end_src

*** Search and Replace

[[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]] (command name: =ag=) is a text search tool optimized for source code and software projects.

You'll also need to have The Silver Searcher installed for this to run.

#+BEGIN_SRC emacs-lisp
  (ecfw-defer
   (message "Running 'use-package ag' deferred")
   (pg-if-available "ag"
     "Install the Silver Searcher <https://github.com/ggreer/the_silver_searcher> for a better code search experience."
     (use-package ag :ensure t)))


  (use-package helm-ag :after (helm ag) :ensure t)
#+END_SRC

[[http://www.masteringemacs.org/articles/2011/04/12/re-builder-interactive-regexp-builder/][re-builder]] is a visual way to verify that you're writing the right regex. I use it whenever I'm building a complicated regular expression.

Most of the time I'd like the output to be string-escaped so I can paste it right into some lisp code somewhere. The other useful option is ='read=, which is good for pasting into the minibuffer.


#+begin_src emacs-lisp
  (use-package re-builder :ensure t :custom (reb-re-syntax 'string))
#+end_src


** Org mode

[[http://orgmode.org][Org mode]] isn't a specific workflow, but it supports organization, note taking, and literate programming, which I use in many other workflows.

This section contains my core org-mode configuration. There may be additional configuration in subsequent sections (e.g., registering languages with [[http://orgmode.org/worg/org-contrib/babel/][Babel]]).

*** Preamble

I have a directory in my home directory where I store a number of generally-useful org files:

- =todo.org= :: My action items
- =notes.org= :: Notes I take (usually with =org-capture=)
- =accomplishments.org= :: Capture progress I make for reporting

(I also have archive versions of those files for getting stale items out of the way.)

#+BEGIN_SRC emacs-lisp
  (defcustom pg-org-files-path (expand-file-name "~/org-files")
    "Location of standard org-mode files (agenda, notes, etc.)")

  (defcustom pg-org-accomplishments
    "accomplishments.org" "Name of accomplishments file")
  (defcustom pg-org-agenda "agenda.org" "Name of agenda file")
  (defcustom pg-org-notes "notes.org" "Name of notes file")
  (defcustom pg-org-todo "todo.org" "Name of todo file")

  (defun pg-org-file (fname)
    "Get the path to the standard org file FNAME"
    (concat (file-name-as-directory pg-org-files-path) fname))
#+END_SRC

**** Accomplishments

For accomplishment tracking, I keep track of the current projects I'm working on, and the customers the projects support.

The code block below lets me query this list of customers and projects when I'm capturing accomplishments.

#+BEGIN_SRC emacs-lisp
  (defun pg--get-customer-id-at-point ()
    (org-entry-get (point) "CUSTOMER_ID"))

  (defun pg--get-projects-for-subtree ()
    (org-map-entries
     (lambda ()
       (org-entry-get (point) "PROJECT_ID")) "+PROJECT_ID={^.+$}" 'tree))

  (defun pg--get-customer-ids (&optional status)
    (if status
        (org-map-entries 'pg--get-customer-id-at-point
                         (format "+CUSTOMER_ID={^.+$}+STATUS=\"%s\"" status))
      (org-map-entries 'pg--get-customer-id-at-point "+CUSTOMER_ID={^.+$}")))

  (defun pg--get-project-ids-for-customer (cust-id)
    (nth 0 (org-map-entries 'pg--get-projects-for-subtree
                            (format "+CUSTOMER_ID=\"%s\"" cust-id))))

  ;; Overkill? Don't mind if I do!
  (defmacro pg-with-file (filename &rest body)
    "Execute BODY in the context of a buffer open to FILENAME."
    (declare (indent 1))
    `(save-excursion
       (with-current-buffer (find-file-noselect ,filename)
         (progn ,@body))))


  (defun pg-accomplishments-customers ()
    (pg-with-file (pg-org-file "accomplishments.org")
      (pg--get-customer-ids "active")))

  (defun pg-accomplishments-projects (cust-id)
    (pg-with-file (pg-org-file "accomplishments.org")
      (pg--get-project-ids-for-customer cust-id)))

  (defun pg-accomplishments-read-customer ()
    (completing-read "Customer: " (pg-accomplishments-customers)))

  (defun pg-accomplishments-read-project (cust-id)
    (completing-read "Project: " (pg-accomplishments-projects cust-id)))
#+END_SRC


*** Core org

These are mainly just tweaks to existing org-mode parameters. One exception is =pg-org-interactive-todo=, which is bound to =C-c C-t=

(Putting =:after (python)= in here because org-mode loads all its =ob-*= babel backends at load, and =ob-python= requires Python, which doesn't seem to be hitting the =use-package= declaration later on. This is a bug, of course.)

#+BEGIN_SRC emacs-lisp


  (use-package org
    :bind (("C-c l"   . org-store-link)
           ("C-c RET" . org-open-at-point)
           ("M-N" . org-forward-heading-same-level)
           ("M-P" . org-backward-heading-same-level)
           ("M-F" . org-next-visible-heading)
           ("M-B" . org-previous-visible-heading))
    :init
    (add-hook 'org-mode-hook (lambda () (setq mode-name "Ø")))
    :custom
    ((org-hide-leading-stars t)
     (org-fast-tag-selection-single-key 'expert)
     (org-default-notes-file "~/org-files/notes.org")
     (org-refile-targets '((nil :maxlevel . 2)))
     ;; Allow org-mode to refile deeper in the tree
     (org-refile-use-outline-path t)
     (org-outline-path-complete-in-steps nil)
     ;; Log all my notes, clock time, etc. related to an item into a
     ;; drawer named LOGBOOK, so it can be collapsed and doesn't clutter
     ;; up the display.
     (org-log-into-drawer "LOGBOOK")
     ;; Customize org-modules to add org-tempo and remove some
     ;; time-consuming nonsense:
     ;;   ol-bbdb: I don't use BBDB
     ;;   ol-irc, ol-mhe, ol-rmail, ol-gnus: I don't need to link to these
     (org-modules '(ol-w3m ol-bibtex ol-docview ol-info  ol-eww org-tempo))


     (org-export-with-smart-quotes t)
     (org-export-backends '(ascii html icalendar latex odt md beamer))
     (org-babel-load-languages '((emacs-lisp . t)
                                 (python . t)
                                 (shell . t))))

    :mode ("\\.org\\'" . org-mode)
    :config
    (progn
      (defun pg-org-interactive-todo ()
        (interactive)
        "Call `org-todo' with the results of a completing read on
  the current set of todo keywords."
        (let ((todo-keyword (completing-read "Status: " org-todo-keywords-1)))
          (org-todo todo-keyword)))

      (bind-key "C-c C-t" #'pg-org-interactive-todo org-mode-map)

      (pg-open-register-org-link)))

  (use-package org-tempo
    :after (org)
    :config
    (pg-util-list-add-unique-var 'org-structure-template-alist
                                 '(("n" . "notes"))))

  (use-package org-indent
    :after (org)
    :diminish " I")
#+END_SRC

*** Agenda

A few of the variables configured here really live in =org.el=, but they're relevant to org-mode-as-personal-organizer, which is what =org-agenda= is about anyway.

=org-agenda-custom-commands= controls additional default views I might want on the agenda. I'm cargo-culting much of this, mostly from [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][John Wiegley's seminal GTD configuration]] (where I got a lot of the rest of it, too).


#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :bind (("C-c a" . org-agenda)
           :map org-agenda-mode-map
           ("C-n" . next-line)
           ("C-p" . previous-line))

    :init
    (setq org-agenda-files '("~/org-files/todo.org"
                             "~/org-files/todo-personal.org")
          org-agenda-ndays 7
          org-deadline-warning-days 14
          org-agenda-show-all-dates t
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t
          org-agenda-start-on-weekday nil
          org-reverse-note-order t

          ;; Control how the Agenda view sorts tasks
          org-agenda-sorting-strategy
          '((agenda
             habit-down
             priority-down
             alpha-up
             time-up
             category-keep)
            (todo
             priority-down
             category-keep)
            (tags
             priority-down
             category-keep)
            (search category-keep))


          org-agenda-custom-commands
          '(("b" "Backlog items" todo "BACKLOG")
            ("a" "Agenda" agenda ""
             ((org-agenda-skip-function
               (lambda nil
                 (org-agenda-skip-entry-if 'todo '("BACKLOG"))))
              (org-agenda-ndays 7)))
            ("A" "Agenda (with backlog)" agenda ""
             ((org-agenda-skip-function
               (lambda nil
                 (org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]")))
              (org-agenda-ndays 1)
              (org-agenda-overriding-header "Today's Priority #A tasks: ")))
            ("w" todo "WAITING" nil)
            ("W" agenda ""
             ((org-agenda-ndays 21)))

            ("u" alltodo ""
             ((org-agenda-skip-function
               (lambda nil
                 (org-agenda-skip-entry-if 'scheduled
                                           'deadline
                                           'regexp "\n]+>")))
              (org-agenda-overriding-header "Unscheduled TODO entries: ")))))

    :config
    (progn
      (pg-util-diminish-major org-agenda-mode "")))
#+END_SRC

*** Capture

Configuration for [[http://orgmode.org/manual/Capture.html][org-capture]].

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :bind ("s-r" . org-capture)

    :init

    (defun pg-accomplishments-template ()
      (let* ((customer (pg-accomplishments-read-customer))
             (project (pg-accomplishments-read-project customer)))
        (concat "* %u %? \n:PROPERTIES:\n:CUSTOMER: "
                customer "\n:PROJECT:  " project "\n:END:")))


    (setq org-capture-templates
          `(("t" "TODO" entry (file+headline "~/org-files/todo.org" "Tasks")
             "* TODO %?\n  %u" :prepend t)
            ("T" "TODO (personal)" entry (file+headline
                                          "~/org-files/todo-personal.org" "Tasks")
             "* TODO %?\n  %u" :prepend t)
            ("n" "Notes" entry (file+headline "~/org-files/notes.org" "Notes")
             "* %u %?" :prepend t)
            ("a" "Accomplishments" entry (file+olp+datetree
                                          "~/org-files/accomplishments.org" "Accomplishments")
             (function pg-accomplishments-template) :prepend t :tree-type week))))
#+END_SRC

*** Indentation

Soft-indent org-mode files by default.

#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :after (org-mode)
    :hook (org-mode . org-indent-mode)
    :diminish org-indent-mode)
#+END_SRC


*** Converting between org and other formats with =pandoc=

I wrote enough code to convert org buffers using pandoc that it became [[https://github.com/pgroce/emacs-pkgs/blob/master/pg-pandoc.org][its own package]].

#+begin_src emacs-lisp
  (use-package pg-pandoc :ensure t)
#+end_src

*** Reference handling with =reftex= and =org-ref=

Citations and references have become a much bigger part of my workflow in the last few years. BibTeX is indispensable to this process. These tools make working with BibTeX much easier.

=reftex= is great for streamlining the process of inserting citations.

#+begin_src emacs-lisp
  (use-package reftex
    :custom (reftex-cite-format 'natbib)
    :hook (LaTeX-mode . reftex-mode))
#+end_src

The [[https://github.com/jkitchin/org-ref][org-ref]] project is an extremely powerful method for organizing references, especially academic papers and/or sources associated (or that can be associated) with PDFs.

#+begin_src emacs-lisp
  (use-package org-ref :ensure t :after org
    :custom (org-ref-default-citation-link "citep"))

  (use-package org-ref-pdf :after (org-ref))
  (use-package org-ref-url-utils :after (org-ref))
#+end_src

*** Quick access to important files

I keep my main notes and todo org files in =~/org-files=. It turns out having a shortcut to open one of those files from literally anywhere is pretty helpful.

#+begin_src emacs-lisp
  (defun pg-open-org-file ()
    "Open one of the org-mode files in the `~/org-files' directory."
    (interactive)
    (let ((fname (read-file-name
                  "Org file: "            ; prompt
                  "~/org-files/"          ; dir
                  nil                     ; default-filename
                  t                       ; mustmatch
                  nil                     ; initial
                  (lambda (x) (s-ends-with-p ".org" x)))))
      (find-file fname)))

  (pg-terminal-any (bind-key "s-o" #'pg-open-org-file))
  (pg-terminal-any (bind-key "C-c o" #'pg-open-org-file))
#+end_src


** Managing projects (=projectile=)

I could probably use tooling around capital-letters Project Management too, but this form concerns managing information associated with the projects I work on.

[[https://github.com/bbatsov/projectile][Projectile]] was written to navigate software projects, but its key features work admirably with projects of all kinds. Some key features:

- Finding files in complex directory hierarchies
- Tracking  project buffers so they can be  quickly killed or searched
- An anchor point for starting subprocesses (e.g., shells, =magit= sessions).

I often make git repos in project directories just to make it easier Projectile to notice. As a bonus, this encourages me to version-control most of what I do.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap* ("C-c p" . projectile-command-map)
    :init
    (progn
      (setq projectile-enable-caching t)
      ;; projectile native indexing is slower, but more reliable imo
      (setq projectile-indexing-method 'native))

    :config
    (progn
      (projectile-global-mode 1)

      (defun pg-projectile-term-in-project (arg)
        "Almost exactly equivalent to `projectile-run-term', but
  don't ask for the program name. (Also look for the shell name in
  `shell-file-name' too.)

  When called with a universal argument, create a new
  terminal. Otherwise, reuse a canonically primary buffer, or
  create it if it doesn't exist."
        (interactive "P")
        (let* ((project (projectile-acquire-root))
               (buffer-name (projectile-generate-process-name
                             "term" arg project))
               (program (or explicit-shell-file-name
                            (getenv "ESHELL")
                            (getenv "SHELL")
                            shell-file-name
                            "/bin/sh")))
          (projectile-with-default-dir project
            (set-buffer (term-ansi-make-term buffer-name program))
            (term-mode)
            (term-char-mode)
            (let (term-escape-char) (term-set-escape-char ?\C-x)))
          (switch-to-buffer buffer-name)))

      (bind-key "1" #'pg-projectile-term-in-project projectile-command-map)


      (defun pg-projectile-eshell-in-project ()
        (interactive)
        (projectile-run-eshell (projectile-project-root)))

      (bind-key "`" #'pg-projectile-eshell-in-project projectile-command-map)))


  (use-package helm-projectile
    :ensure t
    :after (helm projectile)
    :init (setq projectile-switch-project-action 'helm-projectile)
    :config (helm-projectile-on))
#+END_SRC



** Semantic editing (=smartparens=)
<<smartparens>>

[[https://github.com/Fuco1/smartparens][Semantic editing]] for lisp and other text formats structured with matching delimiters. (They actually use the Github wiki for documentation.)

This is normally thought of as a programming concern, but most written forms of natural language use paired delimiters---not to mention all the markup formats text is often encoded in. So while this is thought of as a programming concern, it has a lot of general utility.

==smartparens-strict-mode= is great, but not globally. In general, =smartparens= in =text-mode= buffers is a mixed bag.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :bind (:map smartparens-mode-map
                ("M-]" . 'sp-forward-sexp)
                ("M-[" . 'sp-backward-sexp)
                ("M-q" . 'sp-indent-defun)
                ("<C-M-S-backspace>" . 'kill-whole-line))
    :hook ((prog-mode . smartparens-strict-mode)
           (text-mode . smartparens-mode))
    :config (sp-use-paredit-bindings))

  (use-package smartparens-config :after (smartparens))
#+END_SRC

kill-whole-line


** Programming and Software Development

*** Documentation

**** Man (=man-file=)

For whenever you want to view a =troff='ed file without installing it into the Man DB.

#+BEGIN_SRC emacs-lisp
  (defun pg-man-file (file)
    "Directly view a man page file that isn't in the man hierarchy."
    (interactive "fFile: ")
    (man (expand-file-name file)))
  (defalias 'man-file 'pg-man-file)
#+END_SRC

**** =eldoc=

#+BEGIN_SRC emacs-lisp
  (use-package eldoc :diminish eldoc-mode)
#+END_SRC

*** Shells

Use [[https://github.com/pgroce/emacs-pkgs/blob/master/pg-sh.org][pg-sh]] to make using shells a little more pleasant. Defer it so the keybindings make it through the super-debinding on MacOS.

#+BEGIN_SRC emacs-lisp
  (pg-terminal-any
   (use-package pg-sh
     :ensure t
     :bind (("s-s" . pg-sh)
            ("s-t" . pg-sh-ssh))))
#+END_SRC

**** eshell

Some special handling for [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]:

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :commands eshell
    :config
    (progn
      (require 'em-smart)
      (setq eshell-where-to-jump 'begin)
      (setq eshell-review-quick-commands nil)
      (setq eshell-smart-space-goes-to-end t)))

  (use-package esh-module
    :after (eshell)
    :config
    (add-to-list 'eshell-modules-list 'eshell-tramp))

  (use-package em-term
    :after (eshell)
    :config
    (progn
      (add-to-list 'eshell-visual-commands "ssh")
      (add-to-list 'eshell-visual-commands "tail")))
#+END_SRC

*** Compilation buffers

Tweak Emacs' compilation support to be more needs-suiting.

#+BEGIN_SRC emacs-lisp
  ;;; Let compilation buffers show colors where possible
  (use-package compile
    :init
    (progn
      ;; If I click on an error in =*compilation*= and the file is
      ;; already open in a frame, don't re-open it in a new frame.
      (setq display-buffer-reuse-frames t)
      ;; Cycle through compilation buffer-naming strategies (currently
      ;; the default–reuse =*compilation*= everywhere–and creating one
      ;; compile buffer per buffer in which =compile= was invoked.
      (use-package pg-compile-buffers :ensure t)
      ;; Let compilation buffers show colors where possible
      (add-hook 'compilation-filter-hook
                (lambda ()
                  (require 'ansi-color)
                  (toggle-read-only)
                  (ansi-color-apply-on-region compilation-filter-start (point))
                  (toggle-read-only)))))
#+END_SRC

*** Debugging

Some tweaks for the debugger.

#+begin_src emacs-lisp
  (use-package gud
    :ensure t
    :config
    (setq gdb-many-windows t
          gud-gdb-command-name "gdb --annotate=1"))
#+end_src

*** Auto-completion (=company=)

[[http://company-mode.github.io/][Company mode]] is great. Mostly it's used by other things, so I don't have to configure or enable it, just make sure it's available. (I don't like seeing take up space in the modeline, though, so diminish it to nothing.)

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :commands company-mode
    :diminish "")
#+END_SRC

*** Version control (=magit=)

Configure magit, the best Git UI ever.

#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t :commands (magit magit-init))
#+END_SRC

*** Syntax checking (=flycheck=)

Emacs comes with =flymake=, but [[https://www.flycheck.org/en/latest/index.html][Flycheck]] is a more comprehensive add-on package. It supports more languages, and in particular supports static type checking in Python with [[https://github.com/python/mypy][mypy]], so it's my preferred syntax checker.

It is recommended to use =exec-path-from-shell=, but I do some other stuff in the Mac-specific section that may make that unnecessary.

Flycheck provides the =global-flycheck-mode= command to turn on Flycheck everywhere. My experience with Smartparens leads me to be wary of this

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :commands (flycheck-mode))
#+end_src

*** Virtualization
**** Vagrant

[[https://www.vagrantup.com/][Vagrant]] is cool. =vagrant-tramp= provides a TRAMP method for editing files in a Vagrant machine and lets you log in to Vagrant machines from Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package vagrant-tramp
    :defer t
    :ensure t)
#+END_SRC

**** Docker
[[https://www.docker.com/][Docker]] is cool. [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] provides syntax highlighting for Docker files. [[https://github.com/Silex/docker.el][docker.el]] lets you manage Docker containers from Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")
  (use-package docker
    :ensure t
    :bind-keymap ("C-c d" . docker-command-map))
#+END_SRC


*** Languages

**** Company

[[https://company-mode.github.io][Company]] is a completion framework used in many languages. I mainly use it for Python.

It usually gets pulled in implicitly by other things , but now that I'm configuring a backend for it, I want to make it explicit.

#+begin_src emacs-lisp
  (use-package company :ensure t)
#+end_src

**** Lisps

Show matching parentheses. (We also get a lot of juice here from [[smartparens][Smartparens mode]].

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

***** Emacs Lisp

Turn on =auto-completion=, =eldoc= and +=paredit=+ =smartparens=.

#+BEGIN_SRC emacs-lisp
  (use-package lisp-mode
    :init
    (progn
      (add-hook
       'emacs-lisp-mode-hook
       '(lambda ()
          (company-mode)
          (eldoc-mode)
          (smartparens-mode)))
      (pg-util-diminish-major emacs-lisp-mode "elisp")))
#+END_SRC

**** Python
Python configuration depends on external tools, many of which are written in Python. They can (and should) be installed in virtual environments rather than in one canonical place in the system, so they can report on the state of whatever you're working on.

Beyond the basics, it is hard to install Python support for Emacs in a vacuum. For simple syntax highlighting, Python-mode is fine, and independent of anything else. However, Python's library and core runtime ecosystem has become quite complex. Emacs has to understand how that complexity is being managed in order to take advantage of libraries like Elpy that provide IDE features.

This configuration below assumes that Python versions on the system are  managed using [[https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv][Pyenv]], including virtual environment management using [[https://github.com/pyenv/pyenv-virtualenv][Pyenv-virtualenv]]. This requires some additional library support, as documented below in [[#pyenv-A57700D7-586E-481A-BDD1-C89B446E6CC9]].

To get the full benefit of this configuration, you will also want to install the following:

#+BEGIN_SRC sh :tangle no
  # Used by python-mode
  pip install jedi
  pip install flake8

  # Used by Elpy
  pip install importmagic
  pip install autopep8
  pip install yapf
  pip install mypy
  # pylint is like flake8, but more
  pip install pylint
#+END_SRC

Depending on how you prefer to manage your environment, you may choose to  install these into virtual environments or into the site packages of the Python version being used. If you install them into a virtual environment, it will need to be activated to use Elpy's features. If you install into the site packages, you will need to ensure that the appropriate Python installation is being used, probably via Pyenv; a function is defined below to help with this.

Many thanks for Rakan Alhneiti for [[http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/][their walkthrough]] setting all this up.

***** Pyenv
:PROPERTIES:
:CUSTOM_ID:       pyenv-A57700D7-586E-481A-BDD1-C89B446E6CC9
:END:

Python runtimes are a mess. Virtual environments address part of the problem, installing libraries in discrete subspaces that can be associated with projects and managed separately from the core libraries in a Python installation.

But the core Python installation itself is frequently a problem too.

- Most Unix operating systems contain Python scripts, meaning they ship a system-level version of Python and a set of scripts that depend on it; it's unwise to develop arbitrary projects against that one.
- Some systems still ship with the now-deprecated Python 2.x; users may reasonably want to target a different Python version for their projects. (In either direction–developers may develop on a system that uses 3.x, but target platforms that only support 2.x.)
- When targeted Python versions change, there may be a transition period during which older scripts require older Python versions, requiring the system to ship all applicable versions of Python. This transition period may last forever.
- A "system" doesn't have to be an OS. It can be a package manager, or even an independently distributed project. Homebrew packages, for instance, may depend on specific minor versions of Python; my system has full copies of Python 3.8, 3.9, and 3.10 on it right now, for instance. That's on top of the Python (3.8.9, at this writing) that Apple ships with Macos. (Ironically, as part of their deprecation of Python 2, Macos doesn't currently ship with a =/usr/bin/python= of any kind, so "be version-agnostic and run =/usr/sbin/env python=" won't help you.)

Bottom line: There can be a ton of versions of Python on your system. Anywhere from zero (hello, Macos!) to infinity of them may be "system" versions, and those versions may change arbitrarily.

The Python community has chosen to solve this in a predictable fashion, but installing more versions of Python. But they'll get it right this time! They swear!

[[https://github.com/pyenv/pyenv][Pyenv]] is a set of shell libraries that:

- Manages a set of Python installations
- Determines which Python installation a user wants to invoke based on a set of configuration files, and "transparently" ensures that it is invoked when any Python-related binaries are called. (To do this, it must insinuate itself into your path, which isn't quite as transparent as symlinks in =/usr/local/bin= or something, but oh well.)

Pyenv depends on a properly configured environment, so it has to be insinuated everywhere Python is used. It has directions for doing this into the shell; for Emacs, there's [[https://github.com/pythonic-emacs/pyenv-mode][Pyenv-mode]]. (Accessing Python in any other way requires additional thought.)

#+begin_src emacs-lisp
  (defun pyenv-activate-current-project ()
    "Automatically activates pyenv version if .python-version file exists."
    (interactive)
    (let ((python-version-directory
           (locate-dominating-file (buffer-file-name) ".python-version")))
      (if python-version-directory
          (let* ((pyenv-version-path
                  (f-expand ".python-version" python-version-directory))
                 (pyenv-current-version
                  (s-trim (f-read-text pyenv-version-path 'utf-8))))
            (pyenv-mode-set pyenv-current-version)
            (pyvenv-workon pyenv-current-version)
            (message (concat "Setting pyenv to " pyenv-current-version))))))


  (use-package pyenv-mode
    :ensure t
    :init
    (progn
      (add-to-list 'exec-path "~/.pyenv/shims")
      (setenv "WORKON_HOME" "~/.pyenv/versions/"))
    :config
    (pyenv-mode)
    :bind
    ("C-x p e" . pyenv-activate-current-project))
#+end_src

You may wonder how to use virtual environments with Pyenv. This is taken care of automatically when using the [[https://github.com/pyenv/pyenv-virtualenv][Pyvenv virtualenv plugin]]. The relevant =.python-version= file just points to a virtualenv (that Pyenv controls).

***** Python-mode

This is the core mode for editing Python files; it also provides functionality many other Python modules, such as Elpy, build on.

We assert a dependency on Pyenv-mode to ensure there will be any Python at all to run for linting and whatnot. If Pyenv seems weird and scary to you, just remove =:after (pyenv-mode)= in the =use-package= clause.

#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)

    :init
    (progn
      ;;; Ignore byte-compiled files when doing filename completion
      (pg-util-list-add-unique-var 'completion-ignored-extensions
                                   '(".pyc" ".pyo"))

      ;;; Treat PSP files as regular HTML, not Python
      (add-to-list 'auto-mode-alist '("\\.psp$" . html-mode))

      (pg-util-diminish-major python-mode "py")
      (setq python-fill-docstring-style 'symmetric))

    :config
    (elpy-enable))


  (use-package py-autopep8 :ensure t :after (python))
  (use-package pylint :ensure t :after (python))
  (use-package pyvenv
    :ensure t
    :commands (pyvenv-activate pyvenv-workon))

#+END_SRC

***** Company-jedi

Jedi is a completion framework for Python. This module integrates it with company.

#+begin_src emacs-lisp
  (use-package company-jedi
    :ensure t
    :demand
    :hook
    (python-mode . (lambda () (add-to-list 'company-backends 'company-jedi))))
#+end_src



***** Elpy

[[https://github.com/jorgenschaefer/elpy][Elpy]] provides IDE feature with the help of a subprocess running Python. Note that it relies heavily on a number of Python libraries, listed in  [[Python]]. If these are not present in the Python version or virtual environment being used, Elpy will probably let you know.

Remove =yasnippet= from elpy-modules because screw =yasnippet=. Add Flycheck because yay static typing. (Mypy is only available in Flycheck, not Flymake.)

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-mypy :ensure t :after (flycheck))

  (use-package elpy
    :ensure t
    :commands (elpy-enable)
    ;;:after (flycheck-mypy)
    :custom
    (elpy-rpc-virtualenv-path 'current)
    :hook
    (elpy-mode . (lambda () (add-hook 'before-save-hook
                                      'elpy-format-code nil t)))
    :init
    (progn
      (setq elpy-rpc-backend "jedi"))
    :config
    (progn
      ;; Unshadow smartparens keybindings
      (unbind-key "<C-right>" 'elpy-mode-map)
      (unbind-key "<C-left>" 'elpy-mode-map)
      (remove-hook 'elpy-modules 'elpy-module-yasnippet)
      (if (load "flycheck" t t)
          (progn
            (remove-hook 'elpy-modules 'elpy-module-flymake)
            (add-hook 'elpy-mode-hook 'flycheck-mode)
            ;; I /think/ these are disabled because of
            (pg-util-list-add-unique-var
             'flycheck-disabled-checkers
             '(python-flake8 python-pylint))))))
#+END_SRC


**** Javascript

Use [[https://github.com/mooz/js2-mode][js2-mode]] rather than the built-in =js-mode= for JavaScript.

I learned my =next-error= and =previous-error= keybinds from Elpy, so use those.

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js$"
    :interpreter "node"
    :bind (("C-c n" . next-error)
           ("C-c p" . previous-error))
    :config (pg-util-diminish-major js2-mode "js2"))
#+END_SRC


* Customizing platforms

** OS X (=darwin=)

Everything in this section goes in =darwin.el= and gets executed only on OS X systems.

This config pretty much assumes you run [[https://brew.sh/][Homebrew]].

*** General customizations

I don't wrap these in =pg-terminal-ns= because they're OS X-specific, not strictly ns-specific. (I dunno, maybe I'll run this on Gnustep someday.)

**** Add =/usr/local/[s]bin= to path

Since you're running [[https://brew.sh/][Homebrew]] (right??) you'll want =/usr/local/bin= and =/usr/local/sbin= in your path.

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (let ((paths '("/usr/local/bin" "/usr/local/sbin")))
    (pg-shell-path-with ("PATH" :into t :as -path)
      (pg-util-list-add-unique paths -path))
    (pg-util-list-add-unique-var 'exec-path paths))

#+END_SRC

**** Use =mdfind= as =locate=

On many Unix systems, the =locate= command will run the system =locate= command to search a pre-compiled file database for a file. On OS X, the =mdfind= command (which searches Spotlight) has sufficiently similar syntax that it can be used instead.

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (setq locate-command "mdfind")
#+END_SRC

**** GNU =ls=

OS X =ls= is not GNU, so use =gls= (the version of =ls= from GNU Coreutils) on the Mac instead of =/bin/ls=, because the GNU version supports dired better. (Make sure it's installed via MacPorts, Homebrew, etc.)

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (pg-if-available "gls"
    "Install 'gls' ('brew install coreutils') for a better dired experience."
    (setq insert-directory-program "gls"))
#+END_SRC


**** Spellcheck

Make my spelling directory =aspell= if I can
#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (pg-if-available "aspell"
    "Install aspell for spellchecking"
    (setq-default ispell-program-name "/usr/local/bin/aspell"))
#+END_SRC



**** Set =TMPDIR= to something short

OS X has horrible long temporary directory paths that sometimes exceed the lengths some applications are expecting. Just use =/tmp=

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (setenv "TMPDIR" "/tmp")
#+END_SRC

**** Remap =kmacro-start/end-macro=

macOS now uses =<f4>= to do something with the touch bar, so remap where =kmacro-start-macro= and =kmacro-end-macro= live. (No, =C-c (= and =C-c )= are not adequate replacements.)

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (bind-key "<f5>" 'kmacro-start-macro)
  (bind-key "<f6>" 'kmacro-end-or-call-macro)
#+END_SRC

*** =ns= terminal configuration



**** GUI setup

Use the navigation functions defined in the general configuration in OS X GUI Emacs.

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (pg-terminal-ns
   (pg-clean-frames)
   (pg-navigate-frames)
   (pg-navigate-windows))
#+END_SRC

**** Keyboard/mouse setup

***** Modifier keys

Make left command =meta=, and make right alt and right command =super=. (I should experiment with right command being =hyper=, but haven't so far.)

#+BEGIN_SRC emacs-lisp :tangle darwin.el

  (pg-terminal-ns
   ;(setq ns-right-control-modifier 'super)
   (setq ns-option-modifier  nil)
   (setq ns-right-option-modifier  'super)
   (setq ns-right-command-modifier 'super)
   (setq ns-command-modifier 'meta))
#+END_SRC

***** Drag and drop

Open a file when it's dragged onto Emacs. (Default is to copy the file path.)

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (pg-terminal-ns (bind-key "<ns-drag-file>" 'ns-find-file))
#+END_SRC

***** Restore mouse wheel

The mouse wheel setup will get clobbered when using a daemon, due to the different order in which things start up. This restores it.

#+begin_src emacs-lisp :tangle darwin.el
  (pg-terminal-ns
   (when (daemonp)
     (progn
       (setq-default mouse-wheel-down-event 'wheel-up
                     mouse-wheel-up-event 'wheel-down)
       (bind-key "<wheel-up>" 'mwheel-scroll)
       (bind-key "<wheel-down>" 'mwheel-scroll))))
#+end_src



*** Integrations with external tools

**** =pdf-tools=

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (pg-if-available "epdfinfo"
    "Install pdf-tools (e.g., 'brew install pdf-tools') for better PDF experience."
    (use-package pdf-tools :ensure t))
#+END_SRC


**** LaTeX

#+BEGIN_SRC emacs-lisp :tangle darwin.el
  (if (file-exists-p "/Library/TeX/texbin")
      (pg-shell-path-append "PATH" '("/Library/Tex/texbin"))
    (message "Pro-tip: Install Tex (or MacTeX) for a better LaTeX experience"))
#+END_SRC


* Wrapup

The configuration has yet to run =scratch.el=, so this isn't /final/ final, but in general this section is the last word.

I normally start the Emacs server. (But don't complain if it's already running.)

#+BEGIN_SRC emacs-lisp
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(server))
  (server-start)
#+END_SRC

Open =scratch.el=, because I always seem to be fiddling with it. Nuke the default scratch buffer, it's silly. (I ran into a problem where it was already dead by this time. I haven't looked into it yet, so in the meantime, just ignore =kill-buffer= if it complains for some reason.)

#+BEGIN_SRC emacs-lisp
  (find-file (expand-file-name "scratch.el" ecfw-config-dir))
  (condition-case nil (kill-buffer "*scratch*") nil)
#+END_SRC


Finally, open =todo.org= and start the day!

#+BEGIN_SRC emacs-lisp
  ;(find-file (expand-file-name "~/org-files/todo.org"))
#+END_SRC
